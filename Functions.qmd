---
title: "Functions"
author: "OP"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(janitor)
library(here)
library(palmerpenguins)
```

## Functions

### Functions with conditions

```{r}

animal_age <- function(animal, age){
  if(animal == "dog") {
    print(paste("Your", animal, "age is", age*7))
  }
  else if(animal == "goat") {
    print(paste("Your", animal, "age is", age*4.7))
  }
  else print(paste0("Oops, I don't have a function to calculate the age of a ", animal, ". Enter dog or goat"))
}
animal_age("goat", 14)
animal_age("dog", 14)

animal_age("whale", 10)
```

```{r}
# function that doubles a value

double_value <- function(my_dollars){
  print(2 * my_dollars)
}

# name of the argument is not required since there is only one argument
double_value(10)

double_value(my_dollars = 10.13)

# expect an error
double_value(my_dollars = "butterfly") 
```

Create a function that returns an awesome restaurant name given a cool animal and your favorite food

```{r}
name_restaurant<- function(animal, food){
  print(paste0(animal,food))
}

name_restaurant(animal = "hawk", food = "pizza")
```

Given temperature in degrees Fahrenheit, write a function that converts it to Celsius

`Temperature in (°C) = (Temperature in (°F) - 32) * 5/9`

```{r}
convert_fahrenheit_to_celsius <- function(temp_f){
  return((temp_f-32)*(5/9))
}

convert_fahrenheit_to_celsius(temp_f = 75)
```

Create a function that given inputs age and hometown, returns "I am \_\_years old, and I'm from \_\_"

```{r}
display_age_origin <- function(age_yr, birth_town){
  print(paste("I am", age_yr,"years old and I am from", birth_town))
}

display_age_origin(age_yr = 10, birth_town = "Sydney")
```

Write a function that, given temperature in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "english" then returns degrees in Fahrenheit.

**K = C + 273.15** (or) C = K -- 273.15

**°F = (K − 273.15) × 1.8 + 32** or °F = (K − 273.15) × 9/5 + 32.

```{r}
convert_kelvin <- function(system, temp_k){
  if(system == "metric"){
    return(temp_k - 273.15)
  }
  else if(system == "english"){
    return((temp_k - 273.15) * (9/5) + 32)
  }
  else(return("Please, enter a valid units system: metric or english."))
}
 
#convert_kelvin("english", 273.15)

#convert_kelvin("metric", 273.15)

convert_kelvin("french", 273.15)
```

## Functions with for loops

### Nested for loop

```{r}

apples <- c(1, 2, 3, 4)
price <- c(7, 10, 25)

fruit_out <- matrix(nrow = length(price), ncol = length(apples))

for (i in seq_along(apples)){
  for(j in seq_along(price)){
    total_cost <- price[j] * apples[i]
    fruit_out[j,i] <- total_cost
  }
}

# expected matrix output
# for each column calculate all row elements before moving on to the next column
#  7 14 21 28
# 10 20 30 40
# 25 50 75 100

fruit_out
```

Create a subset with a function, and then return something based on that subset.

```{r}

dog_choice <- (data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), food = c("everything", "salmon", "pancakes", "chicken", "enchiladas")))

```

```{r}
dog_menu <- function(dog_name_arg){
  dog_details <- filter(dog_choice, dog_name == dog_name_arg) 
  print(paste("My name is", dog_details$dog_name, "and my favorite food is", dog_details$food))
}
```

```{r}
dog_menu(dog_name_arg = "Teddy")
```

### Function with a for loop

```{r}
# Create a function that calculates a mean value of a given column with numeric values

df_means <- function(df){
  for (i in seq_along(df)){
    col_mean <- mean(df[[i]], na.rm = TRUE)
    # colnames returns a name of column for a given postion
    col_name <- colnames(df[i])
    print(paste("The mean value of", col_name, "is", col_mean))
  }
}
```

```{r}
df_means(df = faithful)
```

### Create a function to calculate the Betz limit (wt)

Air density: kg/ m\^3

wind velocity: mi/hr

power: wt

```{r}
calculate_betz_windpower <- function(air_density, 
                                     rotor_radius, 
                                     wind_velocity){
  if (wind_velocity > 130){
    warning("Whoa, that's a pretty high wind speed. Are you sure?")
  }
  if (rotor_radius <= 0){
    stop("Rotor radius must a positive value in meters")
  }
  0.3 * air_density * pi * (rotor_radius^2) * (wind_velocity^3)
  
}

```

```{r}
calculate_betz_windpower(air_density = 1.2, 
                         rotor_radius = 10, 
                         wind_velocity = 150)
```

```{r}
calculate_betz_windpower(air_density = 1.2, 
                         rotor_radius = 10, 
                         wind_velocity = 150)
```
